{"version":3,"sources":["ScriptD6_B1.js"],"names":["fetch","window","location","href","method","response","serverDate","headers","get","Error","Date","getTime","console","error","getServerTimeAsync","cc","Class","extends","Component","properties","onLoad","updateServerTime","timestamp","date","formattedTime","toLocaleString","serverTimeLabel","string"],"mappings":";;;;;;;uEAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAE+BA,MAAMC,OAAOC,QAAP,CAAgBC,IAAtB,EAA4B;AAC/CC,oCAAQ;AADuC,yBAA5B,CAF/B;;AAAA;AAEcC,gCAFd;AAMcC,kCANd,GAM2BD,SAASE,OAAT,CAAiBC,GAAjB,CAAqB,MAArB,CAN3B;;AAAA,4BAOaF,UAPb;AAAA;AAAA;AAAA;;AAAA,8BAO+B,IAAIG,KAAJ,CAAU,yBAAV,CAP/B;;AAAA;AAAA,yDASe,IAAIC,IAAJ,CAASJ,UAAT,EAAqBK,OAArB,EATf;;AAAA;AAAA;AAAA;;AAWQC,gCAAQC,KAAR,CAAc,4BAAd;AAXR,yDAYe,IAZf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;oBAAeC;;;;;;;AAgBfC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfQ,KAHP;;AAqBL;;AAEAC,UAvBK,oBAuBI;AACL,aAAKC,gBAAL;AACH,KAzBI;AA2BCA,oBA3BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCA4BuBP,oBA5BvB;;AAAA;AA4BKQ,qCA5BL;;AA6BD,gCAAIA,cAAc,IAAlB,EAAwB;AACdC,oCADc,GACP,IAAIb,IAAJ,CAASY,SAAT,CADO;AAEdE,6CAFc,GAEED,KAAKE,cAAL,EAFF,EAEyB;;AAC7C,qCAAKC,eAAL,CAAqBC,MAArB,GAA8B,qBAAqBH,aAAnD;AACH,6BAJD,MAIO;AACH,qCAAKE,eAAL,CAAqBC,MAArB,GAA8B,6BAA9B;AACH;;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAT","file":"ScriptD6_B1.js","sourceRoot":"../../../../../assets/Day6/ScriptD6","sourcesContent":["async function getServerTimeAsync() {\n    try {\n        const response = await fetch(window.location.href, {\n            method: 'HEAD'\n        });\n\n        const serverDate = response.headers.get(\"Date\");\n        if (!serverDate) throw new Error(\"No Date header received\");\n\n        return new Date(serverDate).getTime(); // Tr·∫£ v·ªÅ timestamp (milliseconds)\n    } catch (error) {\n        console.error(\"Failed to get server time:\", error);\n        return null;\n    }\n}\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.updateServerTime();\n    },\n\n    async updateServerTime() {\n        const timestamp = await getServerTimeAsync();\n        if (timestamp !== null) {\n            const date = new Date(timestamp);\n            const formattedTime = date.toLocaleString(); // ho·∫∑c toISOString()\n            this.serverTimeLabel.string = \"üïí Server Time: \" + formattedTime;\n        } else {\n            this.serverTimeLabel.string = \"‚ùå Failed to get server time\";\n        }\n    }\n});\n"]}