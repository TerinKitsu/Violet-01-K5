{"version":3,"sources":["D5_Bai13.js"],"names":["asyncFunc1","Promise","resolve","console","log","setTimeout","asyncFunc2","asyncFunc3","runSequentially","funcs","reduce","prevPromise","currentFunc","then"],"mappings":";;;;;;AAAA;;AAEA,SAASA,UAAT,GAAsB;AAClB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BC,gBAAQC,GAAR,CAAY,oBAAZ;AACAC,mBAAW,YAAM;AACbF,oBAAQC,GAAR,CAAY,sBAAZ;AACAF,oBAAQ,CAAR;AACH,SAHD,EAGG,IAHH;AAIH,KANM,CAAP;AAOH;;AAED,SAASI,UAAT,GAAsB;AAClB,WAAO,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BC,gBAAQC,GAAR,CAAY,oBAAZ;AACAC,mBAAW,YAAM;AACbF,oBAAQC,GAAR,CAAY,sBAAZ;AACAF,oBAAQ,CAAR;AACH,SAHD,EAGG,IAHH;AAIH,KANM,CAAP;AAOH;;AAED,SAASK,UAAT,GAAsB;AAClB,WAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC5BC,gBAAQC,GAAR,CAAY,oBAAZ;AACAC,mBAAW,YAAM;AACbF,oBAAQC,GAAR,CAAY,sBAAZ;AACAF,oBAAQ,CAAR;AACH,SAHD,EAGG,IAHH;AAIH,KANM,CAAP;AAOH;;AAED,SAASM,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,WAAOA,MAAMC,MAAN,CAAa,UAACC,WAAD,EAAcC,WAAd,EAA8B;AAC9C,eAAOD,YAAYE,IAAZ,CAAiB;AAAA,mBAAMD,aAAN;AAAA,SAAjB,CAAP;AACH,KAFM,EAEJX,QAAQC,OAAR,EAFI,CAAP;AAGH;;AAEDM,gBAAgB,CAACR,UAAD,EAAaM,UAAb,EAAyBC,UAAzB,CAAhB,EACKM,IADL,CACU,YAAM;AACRV,YAAQC,GAAR,CAAY,sCAAZ;AACH,CAHL","file":"D5_Bai13.js","sourceRoot":"../../../../assets/Day5","sourcesContent":["//const asyncFuncs = [func1, func2, func3];\n\nfunction asyncFunc1() {\n    return new Promise((resolve) => {\n        console.log(\"Started asyncFunc1\");\n        setTimeout(() => {\n            console.log(\"Completed asyncFunc1\");\n            resolve(1);\n        }, 1000);\n    });\n}\n\nfunction asyncFunc2() {\n    return new Promise((resolve) => {\n        console.log(\"Started asyncFunc2\");\n        setTimeout(() => {\n            console.log(\"Completed asyncFunc2\");\n            resolve(2);\n        }, 1000);\n    });\n}\n\nfunction asyncFunc3() {\n    return new Promise((resolve) => {\n        console.log(\"Started asyncFunc3\");\n        setTimeout(() => {\n            console.log(\"Completed asyncFunc3\");\n            resolve(3);\n        }, 1000);\n    });\n}\n\nfunction runSequentially(funcs) {\n    return funcs.reduce((prevPromise, currentFunc) => {\n        return prevPromise.then(() => currentFunc());\n    }, Promise.resolve());\n}\n\nrunSequentially([asyncFunc1, asyncFunc2, asyncFunc3])\n    .then(() => {\n        console.log(\"All functions completed in sequence.\");\n    });"]}